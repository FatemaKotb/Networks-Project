//
// Generated file, do not edit! Created by opp_msgtool 6.0 from packet.msg.
//

#ifndef __PACKET_M_H
#define __PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Packet;
// cplusplus {{
        #include <bitset>
        typedef  std::bitset<8> bits;
// }}

/**
 * Class generated from <tt>packet.msg:8</tt> by opp_msgtool.
 * <pre>
 * packet Packet
 * {
 *     \@customize(true);
 * 
 *     int seq_num;
 *     int frame_type;
 *     int ack_nack_num;
 *     string payload;
 *     bits checksum;
 * }
 * </pre>
 *
 * Packet_Base is only useful if it gets subclassed, and Packet is derived from it.
 * The minimum code to be written for Packet is the following:
 *
 * <pre>
 * class Packet : public Packet_Base
 * {
 *   private:
 *     void copy(const Packet& other) { ... }

 *   public:
 *     Packet(const char *name=nullptr, short kind=0) : Packet_Base(name,kind) {}
 *     Packet(const Packet& other) : Packet_Base(other) {copy(other);}
 *     Packet& operator=(const Packet& other) {if (this==&other) return *this; Packet_Base::operator=(other); copy(other); return *this;}
 *     virtual Packet *dup() const override {return new Packet(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Packet_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Packet)
 * </pre>
 */
class Packet_Base : public ::omnetpp::cPacket
{
  protected:
    int seq_num = 0;
    int frame_type = 0;
    int ack_nack_num = 0;
    omnetpp::opp_string payload;
    bits checksum;

  private:
    void copy(const Packet_Base& other);

  protected:
    bool operator==(const Packet_Base&) = delete;
    Packet_Base(const Packet_Base& other);
    // make assignment operator protected to force the user override it
    Packet_Base& operator=(const Packet_Base& other);

  public:
    // make constructors protected to avoid instantiation
    Packet_Base(const char *name=nullptr, short kind=0);
    virtual ~Packet_Base();
    virtual Packet_Base *dup() const override {return new Packet_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSeq_num() const;
    virtual void setSeq_num(int seq_num);

    virtual int getFrame_type() const;
    virtual void setFrame_type(int frame_type);

    virtual int getAck_nack_num() const;
    virtual void setAck_nack_num(int ack_nack_num);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);

    virtual const bits& getChecksum() const;
    virtual bits& getChecksumForUpdate() { return const_cast<bits&>(const_cast<Packet_Base*>(this)->getChecksum());}
    virtual void setChecksum(const bits& checksum);
};


namespace omnetpp {

inline any_ptr toAnyPtr(const bits *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline bits *fromAnyPtr(any_ptr ptr) { return ptr.get<bits>(); }
template<> inline Packet_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Packet_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PACKET_M_H

